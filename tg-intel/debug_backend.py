#!/usr/bin/env python3
"""
–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å backend
"""
import sys
import os
from pathlib import Path

print("=" * 60)
print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê BACKEND")
print("=" * 60)

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
current_dir = Path(__file__).parent.absolute()
print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
print("\nüìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
for item in current_dir.iterdir():
    if item.is_dir():
        print(f"  üìÅ {item.name}/")
        if item.name == "apps":
            for subitem in item.iterdir():
                if subitem.is_dir():
                    print(f"    üìÅ {subitem.name}/")
    else:
        print(f"  üìÑ {item.name}")

# 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º Python path
print(f"\nüêç Python path:")
for i, path in enumerate(sys.path):
    print(f"  {i}: {path}")

# 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
print(f"\nüåç –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
print(f"  PYTHONPATH: {os.environ.get('PYTHONPATH', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')}")
print(f"  PWD: {os.environ.get('PWD', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')}")

# 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
print(f"\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤:")
key_files = [
    "apps/backend/app.py",
    "apps/backend/core/config.py",
    "apps/backend/api/channels.py",
    ".env"
]

for file_path in key_files:
    full_path = current_dir / file_path
    exists = full_path.exists()
    print(f"  {'‚úÖ' if exists else '‚ùå'} {file_path}: {'–°–£–©–ï–°–¢–í–£–ï–¢' if exists else '–ù–ï –ù–ê–ô–î–ï–ù'}")

# 6. –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏
print(f"\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤:")

try:
    print("  –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç config...")
    from apps.backend.core.config import settings
    print("  ‚úÖ config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    print(f"    - supabase_url: {settings.supabase_url}")
    print(f"    - tg_api_id: {settings.tg_api_id}")
except Exception as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ config: {e}")

try:
    print("  –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç app...")
    from apps.backend.app import app
    print("  ‚úÖ app –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    print(f"    - –¢–∏–ø: {type(app)}")
    print(f"    - –ù–∞–∑–≤–∞–Ω–∏–µ: {getattr(app, 'title', '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')}")
except Exception as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ app: {e}")
    import traceback
    traceback.print_exc()

# 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º uvicorn
print(f"\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ uvicorn:")
try:
    import uvicorn
    print(f"  ‚úÖ uvicorn –≤–µ—Ä—Å–∏—è: {uvicorn.__version__}")
except Exception as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ uvicorn: {e}")

# 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ uvicorn
print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ uvicorn:")
try:
    from fastapi.testclient import TestClient
    client = TestClient(app)
    response = client.get("/healthz")
    print(f"  ‚úÖ Health check: {response.status_code} - {response.json()}")
except Exception as e:
    print(f"  ‚ùå –û—à–∏–±–∫–∞ health check: {e}")

print("\n" + "=" * 60)
print("üèÅ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
print("=" * 60)

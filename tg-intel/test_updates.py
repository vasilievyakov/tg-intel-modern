#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –∏ –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.
"""

import sys
import subprocess
import importlib
import os
from pathlib import Path

def test_python_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã Python –º–æ–¥—É–ª–µ–π."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Python –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    modules_to_test = [
        'fastapi',
        'uvicorn',
        'pydantic',
        'psycopg',
        'telethon',
        'apscheduler',
        'httpx',
        'python-dotenv'
    ]
    
    failed_imports = []
    
    for module in modules_to_test:
        try:
            importlib.import_module(module)
            print(f"  ‚úÖ {module}")
        except ImportError as e:
            print(f"  ‚ùå {module}: {e}")
            failed_imports.append(module)
    
    if failed_imports:
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {', '.join(failed_imports)}")
        return False
    else:
        print("\n‚úÖ –í—Å–µ Python –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True

def test_backend_app():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç backend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ backend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –≤ sys.path
        backend_path = Path(__file__).parent / "apps" / "backend"
        sys.path.insert(0, str(backend_path))
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        import apps.backend.app
        import apps.backend.core.config
        import apps.backend.core.db
        import apps.backend.api.channels
        import apps.backend.api.posts
        import apps.backend.api.summaries
        import apps.backend.services.telegram
        import apps.backend.services.fetcher
        import apps.backend.services.ai
        
        print("  ‚úÖ Backend –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ backend: {e}")
        return False

def test_node_modules():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ node_modules."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    frontend_path = Path(__file__).parent / "apps" / "frontend"
    node_modules_path = frontend_path / "node_modules"
    
    if node_modules_path.exists():
        print("  ‚úÖ node_modules –Ω–∞–π–¥–µ–Ω")
        return True
    else:
        print("  ‚ö†Ô∏è  node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'pnpm install' –≤ apps/frontend/")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π tg-intel...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Python –∏–º–ø–æ—Ä—Ç—ã
    python_ok = test_python_imports()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º backend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    backend_ok = test_backend_app()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    frontend_ok = test_node_modules()
    
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"  Python –∏–º–ø–æ—Ä—Ç—ã: {'‚úÖ' if python_ok else '‚ùå'}")
    print(f"  Backend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {'‚úÖ' if backend_ok else '‚ùå'}")
    print(f"  Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {'‚úÖ' if frontend_ok else '‚ùå'}")
    
    if python_ok and backend_ok and frontend_ok:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return 0
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
